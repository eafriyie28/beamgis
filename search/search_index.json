{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to beamgis","text":"<p>A python package for geospatial analysis and mapping</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://eafriyie28.github.io/beamgis</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create interactive maps</li> <li> </li> </ul>"},{"location":"#process-geospatial-data","title":"Process geospatial data","text":""},{"location":"#usage","title":"Usage","text":"<pre><code>import beamgis\n</code></pre>"},{"location":"beamgis/","title":"beamgis module","text":"<p>Main module.</p>"},{"location":"beamgis/#beamgis.beamgis.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>beamgis/beamgis.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenTopoMap\"):\n        \"\"\"Add basemap to the map.\n\n        Args:\n            basemap (str, optional): Basemap name. Defaults to \"OpenTopoMap\".\n        \"\"\"\n\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add(layer)\n\n    def add_basemap_gui(self, options=None, position=\"topright\"):\n        \"\"\"\n        Adds a graphical user interface (GUI) for selecting basemaps.\n\n        Args:\n            options (list, optional): A list of basemap options to display in the dropdown.\n                Defaults to [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].\n            position (str, optional): The position of the widget on the map. Defaults to \"topright\".\n\n        Behavior:\n            - A toggle button is used to show or hide the dropdown and close button.\n            - The dropdown allows users to select a basemap from the provided options.\n            - The close button removes the widget from the map.\n\n        Event Handlers:\n            - `on_toggle_change`: Toggles the visibility of the dropdown and close button.\n            - `on_button_click`: Closes and removes the widget from the map.\n            - `on_dropdown_change`: Updates the map's basemap when a new option is selected.\n        \"\"\"\n        if options is None:\n            options = [\n                \"OpenStreetMap.Mapnik\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"CartoDB.DarkMatter\",\n            ]\n\n        toggle = widgets.ToggleButton(\n            value=True,\n            button_style=\"\",\n            tooltip=\"Click me\",\n            icon=\"map\",\n        )\n        toggle.layout = widgets.Layout(width=\"45px\", height=\"45px\")\n\n        dropdown = widgets.Dropdown(\n            options=options,\n            value=options[0],\n            description=\"Basemap:\",\n            style={\"description_width\": \"initial\"},\n        )\n        dropdown.layout = widgets.Layout(width=\"250px\", height=\"40px\")\n\n        button = widgets.Button(\n            icon=\"times\",\n        )\n        button.layout = widgets.Layout(width=\"40px\", height=\"40px\")\n\n        hbox = widgets.HBox([toggle, dropdown, button])\n\n        def on_toggle_change(change):\n            \"\"\"\n            Toggles the visibility of the dropdown and close button.\n\n            Args:\n                change (dict): The change event containing the new value of the toggle button.\n            \"\"\"\n            if change[\"new\"]:\n                hbox.children = [toggle, dropdown, button]\n            else:\n                hbox.children = [toggle]\n\n        toggle.observe(on_toggle_change, names=\"value\")\n\n        def on_button_click(b):\n            \"\"\"\n            Closes and removes the widget from the map.\n\n            Args:\n                b (ipywidgets.Button): The button click event.\n            \"\"\"\n            hbox.close()\n            toggle.close()\n            dropdown.close()\n            button.close()\n\n        button.on_click(on_button_click)\n\n        def on_dropdown_change(change):\n            \"\"\"\n            Updates the map's basemap when a new option is selected.\n\n            Args:\n                change (dict): The change event containing the new value of the dropdown.\n            \"\"\"\n            if change[\"new\"]:\n                self.layers = self.layers[:-2]\n                self.add_basemap(change[\"new\"])\n\n        dropdown.observe(on_dropdown_change, names=\"value\")\n\n        control = ipyleaflet.WidgetControl(widget=hbox, position=position)\n        self.add(control)\n\n    def add_google_map(self, map_type=\"ROADMAP\"):\n        \"\"\"Add Google Map to the map.\n\n        Args:\n            map_type (str, optional): Map type. Defaults to \"ROADMAP\".\n        \"\"\"\n        map_types = {\n            \"ROADMAP\": \"m\",\n            \"SATELLITE\": \"s\",\n            \"HYBRID\": \"y\",\n            \"TERRAIN\": \"p\",\n        }\n        map_type = map_types[map_type.upper()]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n        self.add(layer)\n\n    def add_geojson(\n        self,\n        data,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n            **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n        layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n        self.add_layer(layer)\n\n        if zoom_to_layer:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Adds a shapefile to the map.\n\n        Args:\n            data (str): The file path to the shapefile.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Adds a GeoDataFrame to the map.\n\n        Args:\n            gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Adds vector data to the map.\n\n        Args:\n            data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self):\n        \"\"\"Adds a layer control widget to the map.\"\"\"\n        control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add_control(control)\n\n    def add_raster(self, url, name=\"Raster\", colormap=None, opacity=None, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            url (str): The file path or URL to the raster data.\n            name (str, optional): The name of the layer. Defaults to \"Raster\".\n            colormap (str, optional): The colormap to apply. Defaults to None.\n            opacity (float, optional): The opacity of the layer. Defaults to None.\n            **kwargs: Additional keyword arguments for the tile layer.\n        \"\"\"\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n        client = TileClient(url)\n        tile_layer = get_leaflet_tile_layer(\n            client, name=name, colormap=colormap, opacity=opacity, **kwargs\n        )\n\n        self.add(tile_layer)\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    def add_image(self, image, bounds=None, **kwargs):\n        \"\"\"Adds an image to the map.\n\n        Args:\n            image (str): The file path to the image.\n            bounds (list, optional): The bounds for the image. Defaults to None.\n            **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n        \"\"\"\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n        overlay = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n        self.add(overlay)\n\n    def add_video(self, video, bounds=None, opacity=1.0, **kwargs):\n        \"\"\"Adds a video to the map.\n\n        Args:\n            video (str): The file path to the video.\n            bounds (list, optional): The bounds for the video. Defaults to None.\n            **kwargs: Additional keyword arguments for the ipyleaflet.VideoOverlay layer.\n        \"\"\"\n\n        if bounds is None or not bounds:\n            raise ValueError(\"Bounds must be specified for the video overlay.\")\n        overlay = ipyleaflet.VideoOverlay(\n            url=video, bounds=bounds, opacity=opacity, **kwargs\n        )\n        self.add(overlay)\n\n    def add_wms_layer(\n        self, url, layers, name, format=\"image/png\", transparent=True, **kwargs\n    ):\n        \"\"\"Adds a WMS layer to the map.\n\n        Args:\n            url (str): The WMS service URL.\n            layers (str): The layers to display.\n            **kwargs: Additional keyword arguments for the ipyleaflet.WMSLayer layer.\n        \"\"\"\n        layer = ipyleaflet.WMSLayer(\n            url=url,\n            layers=layers,\n            name=name,\n            format=format,\n            transparent=transparent,\n            **kwargs,\n        )\n        self.add(layer)\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenTopoMap')</code>","text":"<p>Add basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Basemap name. Defaults to \"OpenTopoMap\".</p> <code>'OpenTopoMap'</code> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_basemap(self, basemap=\"OpenTopoMap\"):\n    \"\"\"Add basemap to the map.\n\n    Args:\n        basemap (str, optional): Basemap name. Defaults to \"OpenTopoMap\".\n    \"\"\"\n\n    url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add(layer)\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, options=None, position='topright')</code>","text":"<p>Adds a graphical user interface (GUI) for selecting basemaps.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>list</code> <p>A list of basemap options to display in the dropdown. Defaults to [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].</p> <code>None</code> <code>position</code> <code>str</code> <p>The position of the widget on the map. Defaults to \"topright\".</p> <code>'topright'</code> <p>Behavior</p> <ul> <li>A toggle button is used to show or hide the dropdown and close button.</li> <li>The dropdown allows users to select a basemap from the provided options.</li> <li>The close button removes the widget from the map.</li> </ul> <p>Event Handlers:     - <code>on_toggle_change</code>: Toggles the visibility of the dropdown and close button.     - <code>on_button_click</code>: Closes and removes the widget from the map.     - <code>on_dropdown_change</code>: Updates the map's basemap when a new option is selected.</p> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_basemap_gui(self, options=None, position=\"topright\"):\n    \"\"\"\n    Adds a graphical user interface (GUI) for selecting basemaps.\n\n    Args:\n        options (list, optional): A list of basemap options to display in the dropdown.\n            Defaults to [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].\n        position (str, optional): The position of the widget on the map. Defaults to \"topright\".\n\n    Behavior:\n        - A toggle button is used to show or hide the dropdown and close button.\n        - The dropdown allows users to select a basemap from the provided options.\n        - The close button removes the widget from the map.\n\n    Event Handlers:\n        - `on_toggle_change`: Toggles the visibility of the dropdown and close button.\n        - `on_button_click`: Closes and removes the widget from the map.\n        - `on_dropdown_change`: Updates the map's basemap when a new option is selected.\n    \"\"\"\n    if options is None:\n        options = [\n            \"OpenStreetMap.Mapnik\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\",\n        ]\n\n    toggle = widgets.ToggleButton(\n        value=True,\n        button_style=\"\",\n        tooltip=\"Click me\",\n        icon=\"map\",\n    )\n    toggle.layout = widgets.Layout(width=\"45px\", height=\"45px\")\n\n    dropdown = widgets.Dropdown(\n        options=options,\n        value=options[0],\n        description=\"Basemap:\",\n        style={\"description_width\": \"initial\"},\n    )\n    dropdown.layout = widgets.Layout(width=\"250px\", height=\"40px\")\n\n    button = widgets.Button(\n        icon=\"times\",\n    )\n    button.layout = widgets.Layout(width=\"40px\", height=\"40px\")\n\n    hbox = widgets.HBox([toggle, dropdown, button])\n\n    def on_toggle_change(change):\n        \"\"\"\n        Toggles the visibility of the dropdown and close button.\n\n        Args:\n            change (dict): The change event containing the new value of the toggle button.\n        \"\"\"\n        if change[\"new\"]:\n            hbox.children = [toggle, dropdown, button]\n        else:\n            hbox.children = [toggle]\n\n    toggle.observe(on_toggle_change, names=\"value\")\n\n    def on_button_click(b):\n        \"\"\"\n        Closes and removes the widget from the map.\n\n        Args:\n            b (ipywidgets.Button): The button click event.\n        \"\"\"\n        hbox.close()\n        toggle.close()\n        dropdown.close()\n        button.close()\n\n    button.on_click(on_button_click)\n\n    def on_dropdown_change(change):\n        \"\"\"\n        Updates the map's basemap when a new option is selected.\n\n        Args:\n            change (dict): The change event containing the new value of the dropdown.\n        \"\"\"\n        if change[\"new\"]:\n            self.layers = self.layers[:-2]\n            self.add_basemap(change[\"new\"])\n\n    dropdown.observe(on_dropdown_change, names=\"value\")\n\n    control = ipyleaflet.WidgetControl(widget=hbox, position=position)\n    self.add(control)\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Adds a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>geopandas.GeoDataFrame</code> <p>The GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Adds a GeoDataFrame to the map.\n\n    Args:\n        gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJSON data. Can be a file path (str) or a dictionary.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_geojson(\n    self,\n    data,\n    zoom_to_layer=True,\n    hover_style=None,\n    **kwargs,\n):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n        **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n    layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n    self.add_layer(layer)\n\n    if zoom_to_layer:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_google_map","title":"<code>add_google_map(self, map_type='ROADMAP')</code>","text":"<p>Add Google Map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>Map type. Defaults to \"ROADMAP\".</p> <code>'ROADMAP'</code> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_google_map(self, map_type=\"ROADMAP\"):\n    \"\"\"Add Google Map to the map.\n\n    Args:\n        map_type (str, optional): Map type. Defaults to \"ROADMAP\".\n    \"\"\"\n    map_types = {\n        \"ROADMAP\": \"m\",\n        \"SATELLITE\": \"s\",\n        \"HYBRID\": \"y\",\n        \"TERRAIN\": \"p\",\n    }\n    map_type = map_types[map_type.upper()]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n    self.add(layer)\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_image","title":"<code>add_image(self, image, bounds=None, **kwargs)</code>","text":"<p>Adds an image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>str</code> <p>The file path to the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds for the image. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.ImageOverlay layer.</p> <code>{}</code> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_image(self, image, bounds=None, **kwargs):\n    \"\"\"Adds an image to the map.\n\n    Args:\n        image (str): The file path to the image.\n        bounds (list, optional): The bounds for the image. Defaults to None.\n        **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n    \"\"\"\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n    overlay = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n    self.add(overlay)\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds a layer control widget to the map.\"\"\"\n    control = ipyleaflet.LayersControl(position=\"topright\")\n    self.add_control(control)\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', colormap=None, opacity=None, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The file path or URL to the raster data.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"Raster\".</p> <code>'Raster'</code> <code>colormap</code> <code>str</code> <p>The colormap to apply. Defaults to None.</p> <code>None</code> <code>opacity</code> <code>float</code> <p>The opacity of the layer. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the tile layer.</p> <code>{}</code> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_raster(self, url, name=\"Raster\", colormap=None, opacity=None, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        url (str): The file path or URL to the raster data.\n        name (str, optional): The name of the layer. Defaults to \"Raster\".\n        colormap (str, optional): The colormap to apply. Defaults to None.\n        opacity (float, optional): The opacity of the layer. Defaults to None.\n        **kwargs: Additional keyword arguments for the tile layer.\n    \"\"\"\n    from localtileserver import TileClient, get_leaflet_tile_layer\n\n    client = TileClient(url)\n    tile_layer = get_leaflet_tile_layer(\n        client, name=name, colormap=colormap, opacity=opacity, **kwargs\n    )\n\n    self.add(tile_layer)\n    self.center = client.center()\n    self.zoom = client.default_zoom\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The file path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Adds a shapefile to the map.\n\n    Args:\n        data (str): The file path to the shapefile.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, geopandas.GeoDataFrame, or dict</code> <p>The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Adds vector data to the map.\n\n    Args:\n        data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type\")\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_video","title":"<code>add_video(self, video, bounds=None, opacity=1.0, **kwargs)</code>","text":"<p>Adds a video to the map.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>str</code> <p>The file path to the video.</p> required <code>bounds</code> <code>list</code> <p>The bounds for the video. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.VideoOverlay layer.</p> <code>{}</code> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_video(self, video, bounds=None, opacity=1.0, **kwargs):\n    \"\"\"Adds a video to the map.\n\n    Args:\n        video (str): The file path to the video.\n        bounds (list, optional): The bounds for the video. Defaults to None.\n        **kwargs: Additional keyword arguments for the ipyleaflet.VideoOverlay layer.\n    \"\"\"\n\n    if bounds is None or not bounds:\n        raise ValueError(\"Bounds must be specified for the video overlay.\")\n    overlay = ipyleaflet.VideoOverlay(\n        url=video, bounds=bounds, opacity=opacity, **kwargs\n    )\n    self.add(overlay)\n</code></pre>"},{"location":"beamgis/#beamgis.beamgis.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, name, format='image/png', transparent=True, **kwargs)</code>","text":"<p>Adds a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The WMS service URL.</p> required <code>layers</code> <code>str</code> <p>The layers to display.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.WMSLayer layer.</p> <code>{}</code> Source code in <code>beamgis/beamgis.py</code> <pre><code>def add_wms_layer(\n    self, url, layers, name, format=\"image/png\", transparent=True, **kwargs\n):\n    \"\"\"Adds a WMS layer to the map.\n\n    Args:\n        url (str): The WMS service URL.\n        layers (str): The layers to display.\n        **kwargs: Additional keyword arguments for the ipyleaflet.WMSLayer layer.\n    \"\"\"\n    layer = ipyleaflet.WMSLayer(\n        url=url,\n        layers=layers,\n        name=name,\n        format=format,\n        transparent=transparent,\n        **kwargs,\n    )\n    self.add(layer)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#beamgis.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>beamgis/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/eafriyie28/beamgis/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>beamgis could always use more documentation, whether as part of the official beamgis docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/eafriyie28/beamgis/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up beamgis for local development.</p> <ol> <li> <p>Fork the beamgis repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/beamgis.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv beamgis\n$ cd beamgis/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 beamgis tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/eafriyie28/beamgis/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"folium module","text":"<p>This module provides a custom Map class that extends folium.Map</p>"},{"location":"foliumap/#beamgis.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom Map class that extends folium.Map.</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"A custom Map class that extends folium.Map.\"\"\"\n\n    def __init__(self, center=(0, 0), zoom=2, **kwargs):\n        \"\"\"Initializes the Map object.\n\n        Args:\n            center (tuple, optional): The initial center of the map as (latitude, longitude). Defaults to (0, 0).\n            zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n            **kwargs: Additional keyword arguments for the folium.Map class.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_geojson(\n        self,\n        data,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n            **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n\n        geojson = folium.GeoJson(data=geojson, **kwargs)\n        geojson.add_to(self)\n\n        if zoom_to_layer and gdf is not None:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"Add basemap to the map using Folium's built-in tiles or a custom TileLayer.\n\n        Args:\n            basemap (str or dict, optional): Basemap name (dotted format) or a custom basemap dict.\n                Examples:\n                    \"CartoDB.DarkMatter\"\n                    {\n                        \"tiles\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",\n                        \"name\": \"OpenTopoMap\",\n                        \"attr\": \"\u00a9 OpenTopoMap contributors\"\n                    }\n        \"\"\"\n        # Built-in basemap mapping\n        basemap_mapping = {\n            \"OpenStreetMap\": \"OpenStreetMap\",\n            \"CartoDB.Positron\": \"CartoDB positron\",\n            \"CartoDB.DarkMatter\": \"CartoDB dark_matter\",\n        }\n\n        if isinstance(basemap, str):\n            if basemap not in basemap_mapping:\n                raise ValueError(\n                    f\"Basemap '{basemap}' not supported. Available options: {list(basemap_mapping.keys())}\"\n                )\n            tile_name = basemap_mapping[basemap]\n            tile_layer = folium.TileLayer(tiles=tile_name, name=basemap, control=True)\n        elif isinstance(basemap, dict):\n            required_keys = {\"tiles\", \"name\", \"attr\"}\n            if not required_keys.issubset(basemap):\n                raise ValueError(\n                    \"Custom basemap dict must include 'tiles', 'name', and 'attr'\"\n                )\n            tile_layer = folium.TileLayer(\n                tiles=basemap[\"tiles\"],\n                name=basemap[\"name\"],\n                attr=basemap[\"attr\"],\n                control=True,\n            )\n        else:\n            raise TypeError(\n                \"Basemap must be a string or a dictionary with 'tiles', 'name', and 'attr'.\"\n            )\n\n        tile_layer.add_to(self)\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Adds a shapefile to the map.\n\n        Args:\n            data (str): The file path to the shapefile.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Adds a GeoDataFrame to the map.\n\n        Args:\n            gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Adds vector data to the map.\n\n        Args:\n            data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self):\n        \"\"\"Adds a layer control widget to the map.\"\"\"\n        folium.LayerControl().add_to(self)\n\n    def add_split_map(\n        self,\n        left=\"openstreetmap\",\n        right=\"cartodbpositron\",\n        colormap_left=None,\n        colormap_right=None,\n        opacity_left=1.0,\n        opacity_right=1.0,\n        **kwargs,\n    ):\n        \"\"\"\n        Adds a split map view to the current map, allowing users to compare two different map layers side by side.\n\n        Parameters:\n            left (str): The tile layer or path to a raster file for the left side of the map.\n            right (str): The tile layer or path to a raster file for the right side of the map.\n            colormap_left (callable): Colormap function for the left raster layer (if applicable).\n            colormap_right (callable): Colormap function for the right raster layer (if applicable).\n            opacity_left (float): Opacity for the left layer.\n            opacity_right (float): Opacity for the right layer.\n            **kwargs: Additional keyword arguments to customize the tile layers.\n\n        Returns:\n            None\n        \"\"\"\n\n        # Handle left layer\n        if isinstance(left, str) and left.lower().endswith((\".tif\", \".tiff\")):\n            client_left = TileClient(left)\n            layer_left = get_folium_tile_layer(\n                client_left,\n                name=\"Left Layer\",\n                colormap=colormap_left,\n                opacity=opacity_left,\n                **kwargs,\n            )\n        else:\n            layer_left = folium.TileLayer(\n                left, name=\"Left Layer\", opacity=opacity_left, **kwargs\n            )\n\n        # Handle right layer\n        if isinstance(right, str) and right.lower().endswith((\".tif\", \".tiff\")):\n            client_right = TileClient(right)\n            layer_right = get_folium_tile_layer(\n                client_right,\n                name=\"Right Layer\",\n                colormap=colormap_right,\n                opacity=opacity_right,\n                **kwargs,\n            )\n        else:\n            layer_right = folium.TileLayer(\n                right, name=\"Right Layer\", opacity=opacity_right, **kwargs\n            )\n\n        # Add layers to map\n        layer_left.add_to(self)\n        layer_right.add_to(self)\n\n        # Add split map control\n        sbs = folium.plugins.SideBySideLayers(\n            layer_left=layer_left, layer_right=layer_right\n        )\n        sbs.add_to(self)\n</code></pre>"},{"location":"foliumap/#beamgis.foliumap.Map.__init__","title":"<code>__init__(self, center=(0, 0), zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the Map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>The initial center of the map as (latitude, longitude). Defaults to (0, 0).</p> <code>(0, 0)</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map. Defaults to 2.</p> <code>2</code> <code>**kwargs</code> <p>Additional keyword arguments for the folium.Map class.</p> <code>{}</code> Source code in <code>beamgis/foliumap.py</code> <pre><code>def __init__(self, center=(0, 0), zoom=2, **kwargs):\n    \"\"\"Initializes the Map object.\n\n    Args:\n        center (tuple, optional): The initial center of the map as (latitude, longitude). Defaults to (0, 0).\n        zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n        **kwargs: Additional keyword arguments for the folium.Map class.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliumap/#beamgis.foliumap.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Add basemap to the map using Folium's built-in tiles or a custom TileLayer.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str or dict</code> <p>Basemap name (dotted format) or a custom basemap dict. Examples:     \"CartoDB.DarkMatter\"     {         \"tiles\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",         \"name\": \"OpenTopoMap\",         \"attr\": \"\u00a9 OpenTopoMap contributors\"     }</p> <code>'OpenStreetMap'</code> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"Add basemap to the map using Folium's built-in tiles or a custom TileLayer.\n\n    Args:\n        basemap (str or dict, optional): Basemap name (dotted format) or a custom basemap dict.\n            Examples:\n                \"CartoDB.DarkMatter\"\n                {\n                    \"tiles\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",\n                    \"name\": \"OpenTopoMap\",\n                    \"attr\": \"\u00a9 OpenTopoMap contributors\"\n                }\n    \"\"\"\n    # Built-in basemap mapping\n    basemap_mapping = {\n        \"OpenStreetMap\": \"OpenStreetMap\",\n        \"CartoDB.Positron\": \"CartoDB positron\",\n        \"CartoDB.DarkMatter\": \"CartoDB dark_matter\",\n    }\n\n    if isinstance(basemap, str):\n        if basemap not in basemap_mapping:\n            raise ValueError(\n                f\"Basemap '{basemap}' not supported. Available options: {list(basemap_mapping.keys())}\"\n            )\n        tile_name = basemap_mapping[basemap]\n        tile_layer = folium.TileLayer(tiles=tile_name, name=basemap, control=True)\n    elif isinstance(basemap, dict):\n        required_keys = {\"tiles\", \"name\", \"attr\"}\n        if not required_keys.issubset(basemap):\n            raise ValueError(\n                \"Custom basemap dict must include 'tiles', 'name', and 'attr'\"\n            )\n        tile_layer = folium.TileLayer(\n            tiles=basemap[\"tiles\"],\n            name=basemap[\"name\"],\n            attr=basemap[\"attr\"],\n            control=True,\n        )\n    else:\n        raise TypeError(\n            \"Basemap must be a string or a dictionary with 'tiles', 'name', and 'attr'.\"\n        )\n\n    tile_layer.add_to(self)\n</code></pre>"},{"location":"foliumap/#beamgis.foliumap.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Adds a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>geopandas.GeoDataFrame</code> <p>The GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Adds a GeoDataFrame to the map.\n\n    Args:\n        gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#beamgis.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJSON data. Can be a file path (str) or a dictionary.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the folium.GeoJson layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_geojson(\n    self,\n    data,\n    zoom_to_layer=True,\n    hover_style=None,\n    **kwargs,\n):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n        **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n\n    geojson = folium.GeoJson(data=geojson, **kwargs)\n    geojson.add_to(self)\n\n    if zoom_to_layer and gdf is not None:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"foliumap/#beamgis.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds a layer control widget to the map.\"\"\"\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#beamgis.foliumap.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The file path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Adds a shapefile to the map.\n\n    Args:\n        data (str): The file path to the shapefile.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#beamgis.foliumap.Map.add_split_map","title":"<code>add_split_map(self, left='openstreetmap', right='cartodbpositron', colormap_left=None, colormap_right=None, opacity_left=1.0, opacity_right=1.0, **kwargs)</code>","text":"<p>Adds a split map view to the current map, allowing users to compare two different map layers side by side.</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>str</code> <p>The tile layer or path to a raster file for the left side of the map.</p> <code>'openstreetmap'</code> <code>right</code> <code>str</code> <p>The tile layer or path to a raster file for the right side of the map.</p> <code>'cartodbpositron'</code> <code>colormap_left</code> <code>callable</code> <p>Colormap function for the left raster layer (if applicable).</p> <code>None</code> <code>colormap_right</code> <code>callable</code> <p>Colormap function for the right raster layer (if applicable).</p> <code>None</code> <code>opacity_left</code> <code>float</code> <p>Opacity for the left layer.</p> <code>1.0</code> <code>opacity_right</code> <code>float</code> <p>Opacity for the right layer.</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments to customize the tile layers.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_split_map(\n    self,\n    left=\"openstreetmap\",\n    right=\"cartodbpositron\",\n    colormap_left=None,\n    colormap_right=None,\n    opacity_left=1.0,\n    opacity_right=1.0,\n    **kwargs,\n):\n    \"\"\"\n    Adds a split map view to the current map, allowing users to compare two different map layers side by side.\n\n    Parameters:\n        left (str): The tile layer or path to a raster file for the left side of the map.\n        right (str): The tile layer or path to a raster file for the right side of the map.\n        colormap_left (callable): Colormap function for the left raster layer (if applicable).\n        colormap_right (callable): Colormap function for the right raster layer (if applicable).\n        opacity_left (float): Opacity for the left layer.\n        opacity_right (float): Opacity for the right layer.\n        **kwargs: Additional keyword arguments to customize the tile layers.\n\n    Returns:\n        None\n    \"\"\"\n\n    # Handle left layer\n    if isinstance(left, str) and left.lower().endswith((\".tif\", \".tiff\")):\n        client_left = TileClient(left)\n        layer_left = get_folium_tile_layer(\n            client_left,\n            name=\"Left Layer\",\n            colormap=colormap_left,\n            opacity=opacity_left,\n            **kwargs,\n        )\n    else:\n        layer_left = folium.TileLayer(\n            left, name=\"Left Layer\", opacity=opacity_left, **kwargs\n        )\n\n    # Handle right layer\n    if isinstance(right, str) and right.lower().endswith((\".tif\", \".tiff\")):\n        client_right = TileClient(right)\n        layer_right = get_folium_tile_layer(\n            client_right,\n            name=\"Right Layer\",\n            colormap=colormap_right,\n            opacity=opacity_right,\n            **kwargs,\n        )\n    else:\n        layer_right = folium.TileLayer(\n            right, name=\"Right Layer\", opacity=opacity_right, **kwargs\n        )\n\n    # Add layers to map\n    layer_left.add_to(self)\n    layer_right.add_to(self)\n\n    # Add split map control\n    sbs = folium.plugins.SideBySideLayers(\n        layer_left=layer_left, layer_right=layer_right\n    )\n    sbs.add_to(self)\n</code></pre>"},{"location":"foliumap/#beamgis.foliumap.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, geopandas.GeoDataFrame, or dict</code> <p>The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Adds vector data to the map.\n\n    Args:\n        data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type\")\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install beamgis, run this command in your terminal:</p> <pre><code>pip install beamgis\n</code></pre> <p>This is the preferred method to install beamgis, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install beamgis from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/eafriyie28/beamgis\n</code></pre>"},{"location":"split_map/","title":"split_map module","text":"<p>This module provides a custom Map class that extends folium.Map</p>"},{"location":"split_map/#beamgis.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom Map class that extends folium.Map.</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"A custom Map class that extends folium.Map.\"\"\"\n\n    def __init__(self, center=(0, 0), zoom=2, **kwargs):\n        \"\"\"Initializes the Map object.\n\n        Args:\n            center (tuple, optional): The initial center of the map as (latitude, longitude). Defaults to (0, 0).\n            zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n            **kwargs: Additional keyword arguments for the folium.Map class.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_geojson(\n        self,\n        data,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n            **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n\n        geojson = folium.GeoJson(data=geojson, **kwargs)\n        geojson.add_to(self)\n\n        if zoom_to_layer and gdf is not None:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"Add basemap to the map using Folium's built-in tiles or a custom TileLayer.\n\n        Args:\n            basemap (str or dict, optional): Basemap name (dotted format) or a custom basemap dict.\n                Examples:\n                    \"CartoDB.DarkMatter\"\n                    {\n                        \"tiles\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",\n                        \"name\": \"OpenTopoMap\",\n                        \"attr\": \"\u00a9 OpenTopoMap contributors\"\n                    }\n        \"\"\"\n        # Built-in basemap mapping\n        basemap_mapping = {\n            \"OpenStreetMap\": \"OpenStreetMap\",\n            \"CartoDB.Positron\": \"CartoDB positron\",\n            \"CartoDB.DarkMatter\": \"CartoDB dark_matter\",\n        }\n\n        if isinstance(basemap, str):\n            if basemap not in basemap_mapping:\n                raise ValueError(\n                    f\"Basemap '{basemap}' not supported. Available options: {list(basemap_mapping.keys())}\"\n                )\n            tile_name = basemap_mapping[basemap]\n            tile_layer = folium.TileLayer(tiles=tile_name, name=basemap, control=True)\n        elif isinstance(basemap, dict):\n            required_keys = {\"tiles\", \"name\", \"attr\"}\n            if not required_keys.issubset(basemap):\n                raise ValueError(\n                    \"Custom basemap dict must include 'tiles', 'name', and 'attr'\"\n                )\n            tile_layer = folium.TileLayer(\n                tiles=basemap[\"tiles\"],\n                name=basemap[\"name\"],\n                attr=basemap[\"attr\"],\n                control=True,\n            )\n        else:\n            raise TypeError(\n                \"Basemap must be a string or a dictionary with 'tiles', 'name', and 'attr'.\"\n            )\n\n        tile_layer.add_to(self)\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Adds a shapefile to the map.\n\n        Args:\n            data (str): The file path to the shapefile.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Adds a GeoDataFrame to the map.\n\n        Args:\n            gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Adds vector data to the map.\n\n        Args:\n            data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self):\n        \"\"\"Adds a layer control widget to the map.\"\"\"\n        folium.LayerControl().add_to(self)\n\n    def add_split_map(\n        self,\n        left=\"openstreetmap\",\n        right=\"cartodbpositron\",\n        colormap_left=None,\n        colormap_right=None,\n        opacity_left=1.0,\n        opacity_right=1.0,\n        **kwargs,\n    ):\n        \"\"\"\n        Adds a split map view to the current map, allowing users to compare two different map layers side by side.\n\n        Parameters:\n            left (str): The tile layer or path to a raster file for the left side of the map.\n            right (str): The tile layer or path to a raster file for the right side of the map.\n            colormap_left (callable): Colormap function for the left raster layer (if applicable).\n            colormap_right (callable): Colormap function for the right raster layer (if applicable).\n            opacity_left (float): Opacity for the left layer.\n            opacity_right (float): Opacity for the right layer.\n            **kwargs: Additional keyword arguments to customize the tile layers.\n\n        Returns:\n            None\n        \"\"\"\n\n        # Handle left layer\n        if isinstance(left, str) and left.lower().endswith((\".tif\", \".tiff\")):\n            client_left = TileClient(left)\n            layer_left = get_folium_tile_layer(\n                client_left,\n                name=\"Left Layer\",\n                colormap=colormap_left,\n                opacity=opacity_left,\n                **kwargs,\n            )\n        else:\n            layer_left = folium.TileLayer(\n                left, name=\"Left Layer\", opacity=opacity_left, **kwargs\n            )\n\n        # Handle right layer\n        if isinstance(right, str) and right.lower().endswith((\".tif\", \".tiff\")):\n            client_right = TileClient(right)\n            layer_right = get_folium_tile_layer(\n                client_right,\n                name=\"Right Layer\",\n                colormap=colormap_right,\n                opacity=opacity_right,\n                **kwargs,\n            )\n        else:\n            layer_right = folium.TileLayer(\n                right, name=\"Right Layer\", opacity=opacity_right, **kwargs\n            )\n\n        # Add layers to map\n        layer_left.add_to(self)\n        layer_right.add_to(self)\n\n        # Add split map control\n        sbs = folium.plugins.SideBySideLayers(\n            layer_left=layer_left, layer_right=layer_right\n        )\n        sbs.add_to(self)\n</code></pre>"},{"location":"split_map/#beamgis.foliumap.Map.__init__","title":"<code>__init__(self, center=(0, 0), zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the Map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>The initial center of the map as (latitude, longitude). Defaults to (0, 0).</p> <code>(0, 0)</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map. Defaults to 2.</p> <code>2</code> <code>**kwargs</code> <p>Additional keyword arguments for the folium.Map class.</p> <code>{}</code> Source code in <code>beamgis/foliumap.py</code> <pre><code>def __init__(self, center=(0, 0), zoom=2, **kwargs):\n    \"\"\"Initializes the Map object.\n\n    Args:\n        center (tuple, optional): The initial center of the map as (latitude, longitude). Defaults to (0, 0).\n        zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n        **kwargs: Additional keyword arguments for the folium.Map class.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"split_map/#beamgis.foliumap.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Add basemap to the map using Folium's built-in tiles or a custom TileLayer.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str or dict</code> <p>Basemap name (dotted format) or a custom basemap dict. Examples:     \"CartoDB.DarkMatter\"     {         \"tiles\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",         \"name\": \"OpenTopoMap\",         \"attr\": \"\u00a9 OpenTopoMap contributors\"     }</p> <code>'OpenStreetMap'</code> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"Add basemap to the map using Folium's built-in tiles or a custom TileLayer.\n\n    Args:\n        basemap (str or dict, optional): Basemap name (dotted format) or a custom basemap dict.\n            Examples:\n                \"CartoDB.DarkMatter\"\n                {\n                    \"tiles\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",\n                    \"name\": \"OpenTopoMap\",\n                    \"attr\": \"\u00a9 OpenTopoMap contributors\"\n                }\n    \"\"\"\n    # Built-in basemap mapping\n    basemap_mapping = {\n        \"OpenStreetMap\": \"OpenStreetMap\",\n        \"CartoDB.Positron\": \"CartoDB positron\",\n        \"CartoDB.DarkMatter\": \"CartoDB dark_matter\",\n    }\n\n    if isinstance(basemap, str):\n        if basemap not in basemap_mapping:\n            raise ValueError(\n                f\"Basemap '{basemap}' not supported. Available options: {list(basemap_mapping.keys())}\"\n            )\n        tile_name = basemap_mapping[basemap]\n        tile_layer = folium.TileLayer(tiles=tile_name, name=basemap, control=True)\n    elif isinstance(basemap, dict):\n        required_keys = {\"tiles\", \"name\", \"attr\"}\n        if not required_keys.issubset(basemap):\n            raise ValueError(\n                \"Custom basemap dict must include 'tiles', 'name', and 'attr'\"\n            )\n        tile_layer = folium.TileLayer(\n            tiles=basemap[\"tiles\"],\n            name=basemap[\"name\"],\n            attr=basemap[\"attr\"],\n            control=True,\n        )\n    else:\n        raise TypeError(\n            \"Basemap must be a string or a dictionary with 'tiles', 'name', and 'attr'.\"\n        )\n\n    tile_layer.add_to(self)\n</code></pre>"},{"location":"split_map/#beamgis.foliumap.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Adds a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>geopandas.GeoDataFrame</code> <p>The GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Adds a GeoDataFrame to the map.\n\n    Args:\n        gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"split_map/#beamgis.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJSON data. Can be a file path (str) or a dictionary.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the folium.GeoJson layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_geojson(\n    self,\n    data,\n    zoom_to_layer=True,\n    hover_style=None,\n    **kwargs,\n):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n        **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n\n    geojson = folium.GeoJson(data=geojson, **kwargs)\n    geojson.add_to(self)\n\n    if zoom_to_layer and gdf is not None:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"split_map/#beamgis.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds a layer control widget to the map.\"\"\"\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"split_map/#beamgis.foliumap.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The file path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Adds a shapefile to the map.\n\n    Args:\n        data (str): The file path to the shapefile.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"split_map/#beamgis.foliumap.Map.add_split_map","title":"<code>add_split_map(self, left='openstreetmap', right='cartodbpositron', colormap_left=None, colormap_right=None, opacity_left=1.0, opacity_right=1.0, **kwargs)</code>","text":"<p>Adds a split map view to the current map, allowing users to compare two different map layers side by side.</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>str</code> <p>The tile layer or path to a raster file for the left side of the map.</p> <code>'openstreetmap'</code> <code>right</code> <code>str</code> <p>The tile layer or path to a raster file for the right side of the map.</p> <code>'cartodbpositron'</code> <code>colormap_left</code> <code>callable</code> <p>Colormap function for the left raster layer (if applicable).</p> <code>None</code> <code>colormap_right</code> <code>callable</code> <p>Colormap function for the right raster layer (if applicable).</p> <code>None</code> <code>opacity_left</code> <code>float</code> <p>Opacity for the left layer.</p> <code>1.0</code> <code>opacity_right</code> <code>float</code> <p>Opacity for the right layer.</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments to customize the tile layers.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_split_map(\n    self,\n    left=\"openstreetmap\",\n    right=\"cartodbpositron\",\n    colormap_left=None,\n    colormap_right=None,\n    opacity_left=1.0,\n    opacity_right=1.0,\n    **kwargs,\n):\n    \"\"\"\n    Adds a split map view to the current map, allowing users to compare two different map layers side by side.\n\n    Parameters:\n        left (str): The tile layer or path to a raster file for the left side of the map.\n        right (str): The tile layer or path to a raster file for the right side of the map.\n        colormap_left (callable): Colormap function for the left raster layer (if applicable).\n        colormap_right (callable): Colormap function for the right raster layer (if applicable).\n        opacity_left (float): Opacity for the left layer.\n        opacity_right (float): Opacity for the right layer.\n        **kwargs: Additional keyword arguments to customize the tile layers.\n\n    Returns:\n        None\n    \"\"\"\n\n    # Handle left layer\n    if isinstance(left, str) and left.lower().endswith((\".tif\", \".tiff\")):\n        client_left = TileClient(left)\n        layer_left = get_folium_tile_layer(\n            client_left,\n            name=\"Left Layer\",\n            colormap=colormap_left,\n            opacity=opacity_left,\n            **kwargs,\n        )\n    else:\n        layer_left = folium.TileLayer(\n            left, name=\"Left Layer\", opacity=opacity_left, **kwargs\n        )\n\n    # Handle right layer\n    if isinstance(right, str) and right.lower().endswith((\".tif\", \".tiff\")):\n        client_right = TileClient(right)\n        layer_right = get_folium_tile_layer(\n            client_right,\n            name=\"Right Layer\",\n            colormap=colormap_right,\n            opacity=opacity_right,\n            **kwargs,\n        )\n    else:\n        layer_right = folium.TileLayer(\n            right, name=\"Right Layer\", opacity=opacity_right, **kwargs\n        )\n\n    # Add layers to map\n    layer_left.add_to(self)\n    layer_right.add_to(self)\n\n    # Add split map control\n    sbs = folium.plugins.SideBySideLayers(\n        layer_left=layer_left, layer_right=layer_right\n    )\n    sbs.add_to(self)\n</code></pre>"},{"location":"split_map/#beamgis.foliumap.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, geopandas.GeoDataFrame, or dict</code> <p>The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>beamgis/foliumap.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Adds vector data to the map.\n\n    Args:\n        data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type\")\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use beamgis in a project:</p> <pre><code>import beamgis\n</code></pre>"},{"location":"examples/Notebook_Example/","title":"Notebook Example","text":"In\u00a0[1]: Copied! <pre>import beamgis\n</pre> import beamgis In\u00a0[2]: Copied! <pre># adding a basemap to a map\n# Create a map with a specific center and zoom level\nm = beamgis.Map(center=(20, 0), zoom=2, height=\"600px\")\nm.add_basemap(basemap=\"CartoDB.DarkMatter\")\nm\n</pre> # adding a basemap to a map # Create a map with a specific center and zoom level m = beamgis.Map(center=(20, 0), zoom=2, height=\"600px\") m.add_basemap(basemap=\"CartoDB.DarkMatter\") m Out[2]: In\u00a0[3]: Copied! <pre>m = beamgis.Map(center=(20, 0), zoom=2, height=\"600px\")\nm.add_google_map(\"terrain\")\nm\n</pre> m = beamgis.Map(center=(20, 0), zoom=2, height=\"600px\") m.add_google_map(\"terrain\") m Out[3]: In\u00a0[4]: Copied! <pre># Importing GeoJSON data from a URL\n\nm = beamgis.Map()\nurl = r\"https://github.com/opengeos/datasets/releases/download/us/us_southeast_countries.geojson\"\nm.add_geojson(url, zoom_to_layer=True, hover_style={\"fillColor\": \"red\"})\nm\n</pre> # Importing GeoJSON data from a URL  m = beamgis.Map() url = r\"https://github.com/opengeos/datasets/releases/download/us/us_southeast_countries.geojson\" m.add_geojson(url, zoom_to_layer=True, hover_style={\"fillColor\": \"red\"}) m Out[4]: In\u00a0[5]: Copied! <pre>url = r\"data\\us_cities.shp\"\n</pre> url = r\"data\\us_cities.shp\" In\u00a0[6]: Copied! <pre># import geopandas as gpd\n\n# # Add the existing GeoDataFrame to the map\n# m.add_shp(url, zoom_to_layer=True, hover_style={\"fillColor\": \"red\"})\n# m\n</pre> # import geopandas as gpd  # # Add the existing GeoDataFrame to the map # m.add_shp(url, zoom_to_layer=True, hover_style={\"fillColor\": \"red\"}) # m"},{"location":"examples/Notebook_Example/#ipyleaflet-demo","title":"Ipyleaflet Demo\u00b6","text":""},{"location":"examples/add_raster/","title":"Add raster","text":"In\u00a0[1]: Copied! <pre>import beamgis\n</pre> import beamgis In\u00a0[2]: Copied! <pre># Display the map object in the Jupyter Notebook\nm = beamgis.Map()\nm\n</pre> # Display the map object in the Jupyter Notebook m = beamgis.Map() m Out[2]: In\u00a0[3]: Copied! <pre># Define the url for the raster file\nurl = r\"https://github.com/opengeos/datasets/releases/download/raster/dem_90m.tif\"\n</pre> # Define the url for the raster file url = r\"https://github.com/opengeos/datasets/releases/download/raster/dem_90m.tif\" In\u00a0[4]: Copied! <pre># Add the raster file to the map with a \"terrain\" colormap\nm.add_raster(url, colormap=\"terrain\", name=\"dem\", opacity=0.5)\nm.add_layer_control()\n</pre> # Add the raster file to the map with a \"terrain\" colormap m.add_raster(url, colormap=\"terrain\", name=\"dem\", opacity=0.5) m.add_layer_control() In\u00a0[5]: Copied! <pre># Add new map\nm_2 = beamgis.Map()\nm_2\n</pre> # Add new map m_2 = beamgis.Map() m_2 Out[5]: In\u00a0[6]: Copied! <pre># Add the second raster file to the map\nurl_2 = \"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\"\n</pre> # Add the second raster file to the map url_2 = \"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\" In\u00a0[7]: Copied! <pre># Add the raster file to the map with specific band indexes and opacity\nm_2.add_raster(url_2, indexes=[5, 4, 3], name=\"landsat\", opacity=0.2)\n</pre> # Add the raster file to the map with specific band indexes and opacity m_2.add_raster(url_2, indexes=[5, 4, 3], name=\"landsat\", opacity=0.2) In\u00a0[8]: Copied! <pre># Create a new map object for adding an image overlay\nimage_m = beamgis.Map()\nimage_m\n</pre> # Create a new map object for adding an image overlay image_m = beamgis.Map() image_m Out[8]: In\u00a0[9]: Copied! <pre># Define the URL for the image to be added to the map\nimage_url = \"https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExZWFocm8xeng4aWQ1bXVmcmUyM2gzczlydmhjc2tyMWhhdzlnZzI3ayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/DMUFPG2niG1TW/giphy.gif\"\n\n# Define the geographical bounds for the image overlay\nbounds = ((13, -150), (40, -120))\n</pre> # Define the URL for the image to be added to the map image_url = \"https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExZWFocm8xeng4aWQ1bXVmcmUyM2gzczlydmhjc2tyMWhhdzlnZzI3ayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/DMUFPG2niG1TW/giphy.gif\"  # Define the geographical bounds for the image overlay bounds = ((13, -150), (40, -120)) In\u00a0[10]: Copied! <pre># Add an image overlay to the map using the specified image URL and geographical bounds\nimage_m.add_image(image_url, bounds)\n</pre> # Add an image overlay to the map using the specified image URL and geographical bounds image_m.add_image(image_url, bounds) In\u00a0[11]: Copied! <pre># Initialize a new map object for adding a video overlay\nvideo_m = beamgis.Map(center=(40, -120), zoom=3)\nvideo_m\n</pre> # Initialize a new map object for adding a video overlay video_m = beamgis.Map(center=(40, -120), zoom=3) video_m Out[11]: In\u00a0[12]: Copied! <pre># Define the URL for the video to be added to the map\nurl = (\n    \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"\n)\nbounds = ((37.56238816, -122.515963), (37.563391708, -122.5130939))\n</pre> # Define the URL for the video to be added to the map url = (     \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" ) bounds = ((37.56238816, -122.515963), (37.563391708, -122.5130939)) In\u00a0[13]: Copied! <pre># Add a video overlay to the map\nvideo_m.add_video(url, bounds, name=\"drone\")\n</pre> # Add a video overlay to the map video_m.add_video(url, bounds, name=\"drone\") In\u00a0[14]: Copied! <pre># Add new map\nwms_m = beamgis.Map(center=(40, -100), zoom=5)\nwms_m\n</pre> # Add new map wms_m = beamgis.Map(center=(40, -100), zoom=5) wms_m Out[14]: In\u00a0[15]: Copied! <pre># Define the URL for the WMS service and the layers to be displayed\nwms_url = \"https://imagery.nationalmap.gov/arcgis/services/USGSNAIPPlus/ImageServer/WMSServer?\"\n</pre> # Define the URL for the WMS service and the layers to be displayed wms_url = \"https://imagery.nationalmap.gov/arcgis/services/USGSNAIPPlus/ImageServer/WMSServer?\" In\u00a0[16]: Copied! <pre># Add the WMS layer to the map\nwms_m.add_wms_layer(\n    wms_url, name=\"natural color\", layers=\"USGSNAIPPlus:NaturalColor\", opacity=0.8\n)\n</pre> # Add the WMS layer to the map wms_m.add_wms_layer(     wms_url, name=\"natural color\", layers=\"USGSNAIPPlus:NaturalColor\", opacity=0.8 )"},{"location":"examples/add_raster/#adding-raster-files","title":"Adding Raster Files\u00b6","text":""},{"location":"examples/add_raster/#adding-raster-to-map","title":"Adding Raster to map\u00b6","text":""},{"location":"examples/add_raster/#displaying-specific-bands","title":"Displaying specific bands\u00b6","text":""},{"location":"examples/add_raster/#adding-an-image-overlay","title":"Adding an image overlay\u00b6","text":""},{"location":"examples/add_raster/#adding-a-video-overlay","title":"Adding a video overlay\u00b6","text":""},{"location":"examples/add_raster/#adding-wms-layer","title":"Adding WMS Layer\u00b6","text":""},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre># import package\nimport beamgis.foliumap as beamgis\n</pre> # import package import beamgis.foliumap as beamgis In\u00a0[2]: Copied! <pre>self = beamgis.Map(center=[20, 0], zoom=4)\nurl = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\nself.add_geojson(url, name=\"Countries\")\nself.add_layer_control()\nself\n</pre> self = beamgis.Map(center=[20, 0], zoom=4) url = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" self.add_geojson(url, name=\"Countries\") self.add_layer_control() self Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre># Built-in basemap\nself = beamgis.Map(center=[40, -100], zoom=4)\nself.add_basemap(\"CartoDB.DarkMatter\")\nself\n</pre> # Built-in basemap self = beamgis.Map(center=[40, -100], zoom=4) self.add_basemap(\"CartoDB.DarkMatter\") self Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre># Custom basemap\nself = beamgis.Map(center=[8, 0], zoom=6)\nself.add_basemap(\n    {\n        \"tiles\": \"https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\",\n        \"name\": \"Google Road\",\n        \"attr\": \"\u00a9 Google contributors\",\n    }\n)\nself\n</pre> # Custom basemap self = beamgis.Map(center=[8, 0], zoom=6) self.add_basemap(     {         \"tiles\": \"https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\",         \"name\": \"Google Road\",         \"attr\": \"\u00a9 Google contributors\",     } ) self Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre># m = beamgis.Map(height=600, center=[39.4948, -108.5492], zoom=12)\n# url = \"https://github.com/opengeos/data/releases/download/raster/Libya-2023-07-01.tif\"\n# url2 = \"https://github.com/opengeos/data/releases/download/raster/Libya-2023-09-13.tif\"\n# m.add_split_map(url, url2)\n# m\n</pre> # m = beamgis.Map(height=600, center=[39.4948, -108.5492], zoom=12) # url = \"https://github.com/opengeos/data/releases/download/raster/Libya-2023-07-01.tif\" # url2 = \"https://github.com/opengeos/data/releases/download/raster/Libya-2023-09-13.tif\" # m.add_split_map(url, url2) # m In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/folium/#folium-demo","title":"Folium Demo\u00b6","text":""},{"location":"examples/map/","title":"Map","text":"In\u00a0[\u00a0]: Copied!"},{"location":"examples/map_widget/","title":"Map widget","text":"In\u00a0[1]: Copied! <pre>#!pip install beamgis\n</pre> #!pip install beamgis In\u00a0[2]: Copied! <pre># Import beamgis\nimport beamgis\n</pre> # Import beamgis import beamgis In\u00a0[3]: Copied! <pre># Create map and add basemap gui and layer control\nm = beamgis.Map(center=(10, 0), zoom=4)\nm.add_basemap_gui()\nm.add_layer_control()\nm\n</pre> # Create map and add basemap gui and layer control m = beamgis.Map(center=(10, 0), zoom=4) m.add_basemap_gui() m.add_layer_control() m Out[3]: In\u00a0[4]: Copied! <pre># Create new map and add basemap gui and layer control\nm2 = beamgis.Map(center=(10, 0), zoom=4)\noptions = [\"OpenTopoMap\", \"Esri.WorldImagery\"]\nm2.add_basemap_gui(options=options)\nm2.add_layer_control()\nm2\n</pre> # Create new map and add basemap gui and layer control m2 = beamgis.Map(center=(10, 0), zoom=4) options = [\"OpenTopoMap\", \"Esri.WorldImagery\"] m2.add_basemap_gui(options=options) m2.add_layer_control() m2 Out[4]: In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/map_widget/#adding-map-widget","title":"Adding Map Widget\u00b6","text":""},{"location":"examples/map_widget/#customize-basemap-options","title":"Customize basemap options\u00b6","text":""},{"location":"examples/split_map/","title":"Split map","text":"In\u00a0[1]: Copied! <pre>import beamgis.foliumap as beam\n</pre> import beamgis.foliumap as beam In\u00a0[2]: Copied! <pre># Create a map centered at a specific location\nm = beam.Map(center=[35.9606, -83.9208], zoom=12)\n</pre> # Create a map centered at a specific location m = beam.Map(center=[35.9606, -83.9208], zoom=12) In\u00a0[3]: Copied! <pre>m.add_split_map(left=\"CartoDB.DarkMatter\", right=\"cartodbpositron\")\nm.add_layer_control()\nm\n</pre> m.add_split_map(left=\"CartoDB.DarkMatter\", right=\"cartodbpositron\") m.add_layer_control() m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre># Create a new map centered at a specific location with a split map view\n# The left map displays a DEM raster with a \"viridis\" colormap and 0.9 opacity\n# The right map displays a Landsat raster with a \"magma\" colormap and 0.5 opacity\n\nraster_m = beam.Map(center=[-8.3793, -74.5357], zoom=10)\nraster_m.add_split_map(\n    left=r\"https://github.com/opengeos/datasets/releases/download/raster/dem_90m.tif\",\n    right=r\"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\",\n    colormap_left=\"terrain\",\n    colormap_right=\"viridis\",\n)\n\nraster_m\n</pre> # Create a new map centered at a specific location with a split map view # The left map displays a DEM raster with a \"viridis\" colormap and 0.9 opacity # The right map displays a Landsat raster with a \"magma\" colormap and 0.5 opacity  raster_m = beam.Map(center=[-8.3793, -74.5357], zoom=10) raster_m.add_split_map(     left=r\"https://github.com/opengeos/datasets/releases/download/raster/dem_90m.tif\",     right=r\"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\",     colormap_left=\"terrain\",     colormap_right=\"viridis\", )  raster_m Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/split_map/#adding-split-map","title":"Adding Split Map\u00b6","text":""}]}